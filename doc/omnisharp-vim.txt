*omnisharp-vim.txt*                     OmniSharp - C# omnicompletion and more.
*omnisharp*  *omnisharp-vim*  *omnisharp.vim*


                             OmniSharp-vim Manual~


==============================================================================
 CONTENTS                                                  *omnisharp-contents*

    1. Dependencies ............................... |omnisharp-dependencies|
    2. Usage ...................................... |omnisharp-usage|
    3. Options .................................... |omnisharp-options|
    4. Commands ................................... |omnisharp-commands|
    5. Integrations ............................... |omnisharp-integrations|

==============================================================================
 1. DEPENDENCIES                                       *omnisharp-dependencies*

Required:~
    - Mono OR .NET Framework
    - Either:
       - Vim 8.0+ or Neovim
      or
       - Vim 7.4 or higher with Python 2 or Python 3 support

Optional:~
    - See |omnisharp-integrations|

==============================================================================
 2. USAGE                                                     *omnisharp-usage*

Opening a `*.cs` file will automatically start an instance of omnisharp-server
(if using vim 8.0+, neovim or vim-dispatch). Using omni-completion will begin
the fsautocomplete process.

Suggestion: Install a completer such as NeoComplete or SuperTab.

==============================================================================
 3. OPTIONS                                                 *omnisharp-options*

                                                   *'g:OmniSharp_server_stdio'*
Value: boolean~
Default: 0~

Use the stdio version of OmniSharp-roslyn. When the stdio version is used,
OmniSharp-vim interacts asynchronously with it, with no other dependencies.
The alternative is the HTTP version of the server, which has synchronous
communication.
>
    let g:OmniSharp_server_stdio = 1
<
------------------------------------------------------------------------------
                                                           *'g:OmniSharp_port'*
Server: HTTP~
Value: integer~
Default: undefined~

Always use this port when starting an OmniSharp HTTP server. Note that this
means you will be unable to run more than one OmniSharp server at a time.
>
    let g:OmniSharp_port = 2000
<
------------------------------------------------------------------------------
                                                   *'g:OmniSharp_start_server'*
Value: boolean~
Default: 1~

Use this option to specify whether OmniSharp will start automatically upon
opening a `*.cs` file.
>
    let g:OmniSharp_start_server = 1
<
------------------------------------------------------------------------------
                                                    *'g:OmniSharp_server_path'*
Value: string~
Default: '/home/username/.omnisharp/omnisharp-roslyn/run' or~
         'C:\Users\username\.omnisharp\omnisharp-roslyn\OmniSharp.exe'~

Use this option to give the absolute path to the roslyn omnish arp server
executable. If not set, the |:OmniSharpInstall| location is used.
>
    let g:OmniSharp_server_path = '/home/username/omnisharp/omnisharp.http-linux-x64/omnisharp/OmniSharp.exe'
<
------------------------------------------------------------------------------
                                                   *'g:OmniSharp_server_ports'*
Server: HTTP~
Value: dictionary~
Default: {}~

Mapping of solution files and/or directories to ports. When auto-starting the
OmniSharp server, it will bind to the port listed here if the solution file or
directory matches. If there is no match, the port will be chosen at random.
>
    let g:OmniSharp_server_ports = {
        \ 'C:\path\to\myproject.sln': 2003,
        \ 'C:\path\to\other\project': 2004,
        \ }
<
------------------------------------------------------------------------------
                                                *'g:OmniSharp_server_use_mono'*
Value: boolean~
Default: 0~

The roslyn server must be run with mono on Linux and OSX. The roslyn server
binaries usually come with an embedded mono, but this can be overridden to use
the installed mono with this option. Note that mono must be in the `$PATH`.
>
    let g:OmniSharp_server_use_mono = 1
<
------------------------------------------------------------------------------
                                                *'g:OmniSharp_highlight_types'*
Value: boolean~
Default: 0~

Enable semantic type/interface/identifier highlighting on `BufEnter`.
>
    let g:OmniSharp_highlight_types = 1
<
------------------------------------------------------------------------------
                                                           *'g:OmniSharp_host'*
Server: HTTP~
Value: string~
Default: 'http://localhost:2000/'~

Use this option to specify the host address of the OmniSharp server. Using
this will not play well with the auto-start functionality, so you should
probably set `g:OmniSharp_start_server = 0`
>
    let g:OmniSharp_host = 'http://localhost:2000'
<
------------------------------------------------------------------------------
                                                       *'g:OmniSharp_loglevel'*
Value: string~
Default (HTTP): 'warning'~
Default (STDIO): 'info'~

Sets the log level.

For stdio (when |g:OmniSharp_server_stdio| is `1`), the possible values are
'debug', 'info' and 'none'. 'info' means log messages received from the
server, and 'debug' means also log the raw JSON request and response bodies.

For HTTP, sets the log level for the python code. Possible values are 'debug',
'info', 'warning', 'error', and 'critical'.
>
    let g:OmniSharp_loglevel = 'warning'
<
------------------------------------------------------------------------------
                                                  *'g:OmniSharp_open_quickfix'*
Value: boolean~
Default: 1~

By default, OmniSharp-vim opens the quickfix window when it is populated, e.g.
after find usages, implementations etc. Set this variable to `0` to prevent the
quickfix window being opened automatically.
>
    let g:OmniSharp_open_quickfix = 0
<
------------------------------------------------------------------------------
                                                    *'g:OmniSharp_selector_ui'*

Use this option to specify a selector UI for choosing code actions and
navigating to symbols. When no selector UI plugin is detected, or
|g:OmniSharp_selector_ui| is set to `''`, then the vim command-line and quickfix
window will be used instead.

Default: Whichever of unite.vim, ctrlp.vim or fzf.vim is installed, or `''` if
none are.
>
    let g:OmniSharp_selector_ui = 'unite'
< or >
    let g:OmniSharp_selector_ui = 'ctrlp'
< or >
    let g:OmniSharp_selector_ui = 'fzf'
< or >
    let g:OmniSharp_selector_ui = ''
<
------------------------------------------------------------------------------
                                                        *'g:OmniSharp_timeout'*
Value: integer~
Default: 1~

Use this option to specify the time (in seconds) to wait for a response from
the server.
>
    let g:OmniSharp_timeout = 1
<
------------------------------------------------------------------------------
                                           *'g:OmniSharp_translate_cygwin_wsl'*
Value: boolean~
Default: 0~

Use this option when vim is running in a Cygwin or Windows Subsystem for Linux
environment on Windows, but the omnisharp server is a Windows binary. When set
to `1`, omnisharp-vim will translate the cygwin/WSL unix paths into Windows
paths and back.
>
    let g:OmniSharp_translate_cygwin_wsl = 1
<
------------------------------------------------------------------------------
                                            *'g:OmniSharp_typeLookupInPreview'*
Value: boolean~
Default: 0~

Use this option to specify whether type lookups display in Vim's Preview
Window (|preview-window|). Type lookups will display in the status line if
this is `0`.
>
    let g:OmniSharp_typeLookupInPreview = 0
<
------------------------------------------------------------------------------
                                                   *'g:OmniSharp_want_snippet'*
Value: boolean~
Default: 0~

Use this option to enable snippet completion.
>
    let g:OmniSharp_want_snippet = 0
<
------------------------------------------------------------------------------
                                    *'g:omnicomplete_fetch_full_documentation'*
Value: boolean~
Default: 0~

Use this option to specify whether OmniSharp will fetch full documentation on
completion suggestions. By default, only type/method signatures are fetched
for performance reasons. Full documentation can still be fetched when needed
using the |:OmniSharpDocumentation| command.
>
    let g:omnicomplete_fetch_full_documentation = 0
<
------------------------------------------------------------------------------
                                                    *'g:syntastic_cs_checkers'*
Value: list~
Default: undefined~

Use this option to enable syntastic integration.
>
    let g:syntastic_cs_checkers = ['code_checker']
<
==============================================================================
 4. COMMANDS                                               *omnisharp-commands*

                                                     *:OmniSharpGotoDefinition*

Navigates to the definition of the symbol under the cursor.

------------------------------------------------------------------------------
                                                *:OmniSharpFindImplementations*

Fills quicklist with implementations of interface/class under the cursor.
Note: this will navigate to implementation if only one is found.

------------------------------------------------------------------------------
                                                  *:OmniSharpPreviewDefinition*

Displays the definition of the symbol under the cursor in the preview window.

------------------------------------------------------------------------------
                                             *:OmniSharpPreviewImplementations*

Displays the implementation of the interface/class under the cursor in the
preview window. If more than one implementation exists, the number of
implementations is echoed.

------------------------------------------------------------------------------
                                                         *:OmniSharpFindSymbol*

Fuzzy-search through symbols

------------------------------------------------------------------------------
                                                         *:OmniSharpFindUsages*

Fills quicklist with usages of symbol under the cursor.
Note: this navigates to usage if only one is found.

------------------------------------------------------------------------------
                                                        *:OmniSharpFindMembers*

Fills quicklist with members in current file.

------------------------------------------------------------------------------
                                                          *:OmniSharpFixUsings*

Removes unused using directives, and adds easily resolved missing ones.

------------------------------------------------------------------------------
                                                         *:OmniSharpTypeLookup*

Displays the type name or method signature of the symbol under the cursor.

Relevent options:
    - |'g:OmniSharp_typeLookupInPreview'|

------------------------------------------------------------------------------
                                                      *:OmniSharpDocumentation*

Opens the documentation for the symbol under the cursor in the preview window.

------------------------------------------------------------------------------
                                                      *:OmniSharpSignatureHelp*

Opens the documentation for the method argument under the cursor in the
preview window.

------------------------------------------------------------------------------
                                                         *:OmniSharpNavigateUp*

Navigates to previous method or class.

------------------------------------------------------------------------------
                                                       *:OmniSharpNavigateDown*

Navigates to next method or class.

------------------------------------------------------------------------------
                                                            *:OmniSharpOpenLog*

Open the log file.

------------------------------------------------------------------------------
                                                     *:OmniSharpGetCodeActions*

Fuzzy-serach through available code actions.

------------------------------------------------------------------------------
                                                     *:OmniSharpGlobalCodeCheck*

Get all code issues in the solution and populate the quickfix window with the
results.

------------------------------------------------------------------------------
                                                             *:OmniSharpRename*

Renames symbol under cursor.

------------------------------------------------------------------------------
                                                         *:OmniSharpCodeFormat*

Formats code.

------------------------------------------------------------------------------
                                                  *:OmniSharpRestartAllServers*

Restarts all running OmniSharp servers.
Note: Requires vim 8.0+, neovim or vim-dispatch.

------------------------------------------------------------------------------
                                                      *:OmniSharpRestartServer*

Restarts the OmniSharp server.
Note: Requires vim 8.0+, neovim or vim-dispatch.

------------------------------------------------------------------------------
                                                        *:OmniSharpStartServer*
Usage: `:OmniSharpStartServer {sln-or-dir}`
       `:OmniSharpStartServer`

Starts an OmniSharp server. If no arguments are provided, this command will
attempt to find a solution file located in a parent directory of the current
buffer and start a server for that file. Alternatively, you can explicitly
provide the path of a solution file or a directory to start the server for.
>
      :OmniSharpStartServer ~/project/project.sln
< or >
      :OmniSharpStartServer ~/project/
<
Note: Requires vim 8.0+, neovim or vim-dispatch.

------------------------------------------------------------------------------
                                                     *:OmniSharpStopAllServers*

Stops all running OmniSharp servers.
Note: Requires vim 8.0+, neovim or vim-dispatch.

------------------------------------------------------------------------------
                                                         *:OmniSharpStopServer*

Stops the OmniSharp server.
Note: Requires vim 8.0+, neovim or vim-dispatch.

------------------------------------------------------------------------------
                                                     *:OmniSharpHighlightTypes*

Highlight/refresh semantic type/interface/identifier highlighting for the
current file.

------------------------------------------------------------------------------
                                                            *:OmniSharpInstall*

Download the latest OmniSharp-roslyn binaries and extract them into
`~/.omnisharp/omnisharp-roslyn`. This can be used to install OmniSharp-roslyn
initially, and to upgrade to the latest version at any time.

Note: Requires 'curl' or 'wget' to be installed for Linux, macOS, Cygwin and
WSL (Windows Subsystem for Linux).

==============================================================================
 5. INTEGRATIONS                                       *omnisharp-integrations*

 5.1 CtrlP, Unite.vim, FZF.vim~

If one of these plugins is detected, it will be used as the selection UI. See
|'g:OmniSharp_selector_ui'| for more.

------------------------------------------------------------------------------
 5.2 ALE                                                        *omnisharp-ale*

If ALE is installed, it will automatically be used to asynchronously check
your code for errors

------------------------------------------------------------------------------
 5.3 SYNTASTIC                                            *omnisharp-syntastic*

If you don't have ALE, you can use Syntastic (which is a synchronous code
checker). The following configuration is required to enable it:
>
    let g:syntastic_cs_checkers = ['code_checker']
<
------------------------------------------------------------------------------
 5.4 DEOPLETE                                              *omnisharp-deoplete*

An omnisharp source is provided for the Deoplete completion engine. If
Deoplete is installed, configure it to use the "omnisharp" source:
>
    call deoplete#custom#option('sources', {
        \ 'cs': ['omnisharp'],
        \ })
<
------------------------------------------------------------------------------
vim:et:ts=8:sts=4:sw=4:ft=help:norl:tw=78:
